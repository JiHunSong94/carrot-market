// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int             @id @default(autoincrement())
  phone           String?         @unique
  email           String?         @unique
  name            String
  avatar          String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  tokens          Token[]
  products        Product[]
  posts           Post[]
  answers         Answer[]
  wonderings      Wondering[]
  writtenReviews  Review[]        @relation(name: "writtenReviews")
  receivedReviews Review[]        @relation(name: "receivedReviews")
  favs            Fav[]
  sales           Sale[]
  purchases       Purchase[]
  records         Record[]
  streams         Stream[]
  streamMessages  StreamMessage[]
  chatMessages    ChatMessage[]
  chatAsBuyer     ChatRoom[]      @relation(name: "buyer")
  chatasSeller    ChatRoom[]      @relation(name: "seller")
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String     @db.MediumText
  favs        Fav[]
  sales       Sale[]
  purchases   Purchase[]
  records     Record[]
  chatRooms   ChatRoom[]
}

model Post {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  question   String      @db.MediumText
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  latitude   Float?
  longitude  Float?
  answers    Answer[]
  wonderings Wondering[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wondering {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id           Int      @id @default(autoincrement())
  review       String   @db.MediumText
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score        Int      @default(1)
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  kind      String
}

enum Kind {
  Purchase
  Sale
  Fav
}

model Stream {
  id            Int             @id @default(autoincrement())
  name          String
  description   String          @db.MediumText
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  price         Int
  streamMessage StreamMessage[]
  cloudflareId  String
  cloudflareUrl String
  cloudflareKey String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model StreamMessage {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  message   String   @db.MediumText
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatRoom {
  id           Int           @id @default(autoincrement())
  product      Product       @relation(fields: [productId], references: [id])
  productId    Int
  chatMessages ChatMessage[]
  buyer        User          @relation(name: "buyer", fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId      Int
  seller       User          @relation(name: "seller", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  message    String   @db.MediumText
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
